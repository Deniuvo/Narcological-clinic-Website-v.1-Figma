import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, X, Send, User, Bot, Phone } from 'lucide-react';
import { Button } from './ui/button';

interface Message {
  id: number;
  text: string;
  isBot: boolean;
  timestamp: Date;
  options?: string[];
}

const botResponses = {
  greeting: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –•–µ–ª—Å–¶–µ–Ω—Ç—Ä. –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å?",
  services: "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n‚Ä¢ –î–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—é\n‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—é\n‚Ä¢ –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—é\n‚Ä¢ –ê–º–±—É–ª–∞—Ç–æ—Ä–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ\n\n–û –∫–∞–∫–æ–π —É—Å–ª—É–≥–µ —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
  prices: "–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞—Ä–∫–æ–ª–æ–≥–∞ - –æ—Ç 2000‚ÇΩ\n‚Ä¢ –î–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è - –æ—Ç 5000‚ÇΩ\n‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç 8000‚ÇΩ\n‚Ä¢ –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è - –æ—Ç 35000‚ÇΩ\n\n–î–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞.",
  emergency: "–ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, –∑–≤–æ–Ω–∏—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ:\nüìû +7 (846) 123-45-67\n\n–í—Ä–∞—á –≤—ã–µ–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!",
  appointment: "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º:\n1. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ +7 (846) 123-45-67\n2. –ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É\n3. –í—ã–±–µ—Ä–µ—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n\n–ü—Ä–∏–µ–º –≤–µ–¥–µ—Ç—Å—è –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.",
  address: "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\nüìç –≥. –°–∞–º–∞—Ä–∞, —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 25\nüöá 5 –º–∏–Ω—É—Ç –æ—Ç —Å—Ç. –º. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è\nüÖøÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞\nüïê –†–∞–±–æ—Ç–∞–µ–º 24/7"
};

const chatFlow = [
  {
    trigger: ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "help", "–ø–æ–º–æ—â—å"],
    response: botResponses.greeting,
    options: ["–£—Å–ª—É–≥–∏", "–¶–µ–Ω—ã", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ê–¥—Ä–µ—Å"]
  },
  {
    trigger: ["—É—Å–ª—É–≥–∏", "–ª–µ—á–µ–Ω–∏–µ", "—á—Ç–æ –ª–µ—á–∏—Ç–µ"],
    response: botResponses.services,
    options: ["–î–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è", "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è", "–¶–µ–Ω—ã"]
  },
  {
    trigger: ["—Ü–µ–Ω—ã", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"],
    response: botResponses.prices,
    options: ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"]
  },
  {
    trigger: ["—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è", "—Å—Ä–æ—á–Ω–æ", "–ø–æ–º–æ—â—å", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"],
    response: botResponses.emergency,
    options: ["–í—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"]
  },
  {
    trigger: ["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø—Ä–∏–µ–º", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"],
    response: botResponses.appointment,
    options: ["–ê–¥—Ä–µ—Å –∫–ª–∏–Ω–∏–∫–∏", "–£—Å–ª—É–≥–∏"]
  },
  {
    trigger: ["–∞–¥—Ä–µ—Å", "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å", "–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è"],
    response: botResponses.address,
    options: ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–£—Å–ª—É–≥–∏", "–¶–µ–Ω—ã"]
  }
];

export function ChatBot() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
      setTimeout(() => {
        addBotMessage(botResponses.greeting, ["–£—Å–ª—É–≥–∏", "–¶–µ–Ω—ã", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ê–¥—Ä–µ—Å"]);
      }, 500);
    }
  }, [isOpen]);

  const addMessage = (text: string, isBot: boolean, options?: string[]) => {
    const newMessage: Message = {
      id: Date.now(),
      text,
      isBot,
      timestamp: new Date(),
      options
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const addBotMessage = (text: string, options?: string[]) => {
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      addMessage(text, true, options);
    }, 1000 + Math.random() * 1000); // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
  };

  const handleSend = () => {
    if (!inputValue.trim()) return;

    addMessage(inputValue, false);
    const userMessage = inputValue.toLowerCase();
    setInputValue('');

    // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const matchedFlow = chatFlow.find(flow => 
      flow.trigger.some(trigger => userMessage.includes(trigger))
    );

    if (matchedFlow) {
      addBotMessage(matchedFlow.response, matchedFlow.options);
    } else {
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
      addBotMessage(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:\n‚Ä¢ –£—Å–ª—É–≥–∞—Ö –∫–ª–∏–Ω–∏–∫–∏\n‚Ä¢ –¶–µ–Ω–∞—Ö –Ω–∞ –ª–µ—á–µ–Ω–∏–µ\n‚Ä¢ –ó–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º\n‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏",
        ["–£—Å–ª—É–≥–∏", "–¶–µ–Ω—ã", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"]
      );
    }
  };

  const handleOptionClick = (option: string) => {
    addMessage(option, false);
    
    const matchedFlow = chatFlow.find(flow => 
      flow.trigger.some(trigger => option.toLowerCase().includes(trigger))
    );

    if (matchedFlow) {
      addBotMessage(matchedFlow.response, matchedFlow.options);
    }
  };

  const handleCallDoctor = () => {
    window.open('tel:+78461234567', '_self');
  };

  return (
    <>
      {/* Chat Toggle Button */}
      <div className="fixed bottom-6 right-6 z-[9999]">
        <Button
          onClick={() => setIsOpen(!isOpen)}
          className="w-16 h-16 rounded-full bg-blue-600 hover:bg-blue-700 shadow-lg hover:shadow-xl transition-all duration-300 chat-pulse"
          size="lg"
        >
          {isOpen ? <X size={24} /> : <MessageCircle size={24} />}
        </Button>
        
        {/* Notification Badge */}
        {!isOpen && (
          <div className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center animate-bounce">
            <span className="text-white text-xs font-medium">1</span>
          </div>
        )}
      </div>

      {/* Chat Window */}
      {isOpen && (
          <div className="fixed bottom-24 right-2 left-2 sm:right-6 sm:left-auto sm:w-96 h-[500px] bg-white rounded-2xl shadow-2xl border border-gray-200 z-[100002] chat-window">
    {/* Header */}
    <div className="flex items-center justify-between p-4 bg-blue-600 text-white rounded-t-2xl">
      <div className="flex items-center space-x-3">
        <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center">
          <Bot className="w-6 h-6 text-blue-600" />
        </div>
        <div className="min-w-0">
          <h3 className="font-medium text-sm sm:text-base">–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –•–µ–ª—Å–¶–µ–Ω—Ç—Ä</h3>
          <p className="text-xs sm:text-sm opacity-90">–û–Ω–ª–∞–π–Ω ‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ</p>
        </div>
      </div>
      <Button
        onClick={handleCallDoctor}
        variant="ghost"
        size="sm"
        className="text-white hover:bg-white/20 flex-shrink-0"
      >
        <Phone size={18} />
            </Button>
          </div>

          {/* Messages */}
          <div className="flex-1 p-4 h-[360px] overflow-y-auto space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}>
                <div className={`max-w-[80%] ${message.isBot ? 'order-2' : 'order-1'}`}>
                  <div className={`px-4 py-2 rounded-2xl ${
                    message.isBot 
                      ? 'bg-gray-100 text-gray-800 rounded-bl-md' 
                      : 'bg-blue-600 text-white rounded-br-md'
                  }`}>
                    <p className="whitespace-pre-line">{message.text}</p>
                  </div>
                  
                  {/* Quick Reply Options */}
                  {message.isBot && message.options && (
                    <div className="flex flex-wrap gap-2 mt-2">
                      {message.options.map((option, index) => (
                        <button
                          key={index}
                          onClick={() => handleOptionClick(option)}
                          className="px-3 py-1 text-sm bg-blue-50 text-blue-600 rounded-full hover:bg-blue-100 transition-colors"
                        >
                          {option}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
                
                {/* Avatar */}
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  message.isBot ? 'order-1 mr-2 bg-blue-100' : 'order-2 ml-2 bg-gray-300'
                }`}>
                  {message.isBot ? <Bot size={16} className="text-blue-600" /> : <User size={16} className="text-gray-600" />}
                </div>
              </div>
            ))}
            
            {/* Typing Indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
                    <Bot size={16} className="text-blue-600" />
                  </div>
                  <div className="bg-gray-100 rounded-2xl rounded-bl-md px-4 py-2">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot" style={{animationDelay: '0.2s'}}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot" style={{animationDelay: '0.4s'}}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex space-x-2">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <Button
                onClick={handleSend}
                disabled={!inputValue.trim()}
                className="w-10 h-10 rounded-full bg-blue-600 hover:bg-blue-700"
                size="sm"
              >
                <Send size={16} />
              </Button>
            </div>
            <p className="text-xs text-gray-500 mt-2 text-center">
              –î–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏ –∑–≤–æ–Ω–∏—Ç–µ: +7 (846) 123-45-67
            </p>
          </div>
        </div>
      )}
    </>
  );
}